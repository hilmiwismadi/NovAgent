# NovAgent - Multi-service Docker Compose
# Monorepo structure with improved organization

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: novabot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-novagent}
      POSTGRES_USER: ${DATABASE_USER:-novabot}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - novabot-db-data:/var/lib/postgresql/data
      - ./packages/database/init-sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-novabot} -d ${DATABASE_NAME:-novagent}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - novabot-network
    profiles:
      - all
      - core

  # WhatsApp Bot Service
  whatsapp-bot:
    build:
      context: .
      dockerfile: apps/whatsapp-bot/Dockerfile
    container_name: novabot-whatsapp
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${DATABASE_USER:-novabot}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-novagent}
      NODE_ENV: production
    volumes:
      - novabot-wa-session:/app/.wwebjs_auth
      - novabot-wa-cache:/app/.wwebjs_cache
      - novabot-logs:/app/logs
      - novabot-message-queue:/app/.message-queue
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - novabot-network
    stdin_open: true
    tty: true
    profiles:
      - all
      - core

  # Dashboard Backend API
  dashboard-api:
    build:
      context: .
      dockerfile: apps/dashboard-api/Dockerfile
    container_name: novabot-dashboard-api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${DATABASE_USER:-novabot}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-novagent}
      NODE_ENV: production
      DASHBOARD_PORT: 5000
    ports:
      - "127.0.0.1:5001:5000"
    volumes:
      - novabot-logs:/app/logs
      - novabot-message-queue:/app/.message-queue
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - novabot-network
    profiles:
      - all
      - dashboard

  # Dashboard Frontend (React + Nginx)
  frontend:
    build:
      context: .
      dockerfile: apps/dashboard-web/Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-https://novabot.izcy.tech/api/dashboard}
    container_name: novabot-frontend
    restart: unless-stopped
    ports:
      - "127.0.0.1:3002:80"
    depends_on:
      - dashboard-api
    networks:
      - novabot-network
    profiles:
      - all
      - dashboard

# Docker volumes for persistent data
volumes:
  novabot-db-data:
    driver: local
    name: novabot-db-data
  novabot-wa-session:
    driver: local
    name: novabot-wa-session
  novabot-wa-cache:
    driver: local
    name: novabot-wa-cache
  novabot-logs:
    driver: local
    name: novabot-logs
  novabot-message-queue:
    driver: local
    name: novabot-message-queue

# Internal network for containers
networks:
  novabot-network:
    driver: bridge
    name: novabot-network
